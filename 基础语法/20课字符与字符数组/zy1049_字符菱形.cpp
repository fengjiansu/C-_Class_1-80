/* 
给定一个字符，用它构造一个对角线长度为5的菱形
E
输出
  E
 EEE
EEEEE
 EEE
  E
 */
#include <bits/stdc++.h>

using namespace std;

int main()
{
   char ch;
   cin >> ch;
   int n = 5; // 对角线长度为 5
    int mid = n / 2;
      /* 
      1. 上半部分（包含中心行）：
对于第 i 行（从 0 开始计算），有以下规律：

前导空格数：mid - i （mid 是菱形的中间行的索引，mid = n / 2）
字符数：2 * i + 1
例如，对于一个对角线长度为 5 的菱形：

第 0 行：2 个空格，1 个字符
第 1 行：1 个空格，3 个字符
第 2 行：0 个空格，5 个字符
2. 下半部分：
下半部分是上半部分的镜像，对称排列。从中间行（mid）开始逐渐减少字符数。

对于第 i 行（从 mid + 1 开始计算）：

前导空格数：i - mid
字符数：2 * (mid - (i - mid)) + 1，也可以简化为：2 * (mid - (i - mid)) + 1 = 2 * (n - 1 - i) + 1
例如，对于一个对角线长度为 5 的菱形：

第 3 行：1 个空格，3 个字符
第 4 行：2 个空格，1 个字符
总结规律
整体上，菱形上下部分字符数量和前导空格数量是对称的。
每一行字符数量是 2 * i + 1，空格数量是 mid - i。
上半部分从顶端到中间字符逐渐增多，下半部分从中间到底端字符逐渐减少。
       */
    // 上半部分
    for (int i = 0; i <= mid; ++i) {
        // 输出前面的空格
        for (int j = 0; j < mid - i; ++j) {
            cout << " ";
        }
        // 输出字符
        for (int j = 0; j < 2 * i + 1; ++j) {
            cout << ch;
        }
        cout << endl;
    }

    // 下半部分
    for (int i = mid - 1; i >= 0; --i) {
        // 输出前面的空格
        for (int j = 0; j < mid - i; ++j) {
            cout << " ";
        }
        // 输出字符
        for (int j = 0; j < 2 * i + 1; ++j) {
            cout << ch;
        }
        cout << endl;
    }


   return 0;
}
